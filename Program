#define F_CPU 8000000UL

#define	buff_size 

#include <avr/io.h>
#include <stdlib.h>
#include <stdio.h>
#include "diskio.h"
#include "pff.h"
#include "spi.h"
#include <math.h>
#include <string.h>

#include <ds18b20.h>
#include <AM2320.h>
#include <ccs811.h>
#include <adxl345.h>
#include <bmp280.h>

AM2320 sensor;

float altitude;
float temp;
float x_acc;
float y_acc;
float z_acc;
float Acceleration;
float pressure;
float Humidity;
float Eco2;
float Etvoc;

bool Start;
bool high;
bool Landing;

int HEX;

FATFS fs;
BYTE read_buff[buff_size];
BYTE write_buff[buff_size];
UINT br; 

int main(void)
{   
	Start = false
	high = false
	Landing = false
	while(1):
	{
		setup(void);
		temperature();
		alt(void);
        AM(void);
	    CCS(void);
	    adxl(void);
		if (Acceleration > 28)
			Start = true
	    if (altitude > 500)
	        high = true
		if ((Acceleration < 11) & ((altitude < 15)) & (Start = true) & (high = true))
	        Landing = true
		if (pf_mount(&fs) == FR_OK )
		{
			if(pf_open("DATA.txt") == FR_OK)
			{
				pf_lseek(0);
				write_buff[buff_size] = (Acceleration, altitude, pressure, temp, Humidity, Eco2, Etvoc, Start, high, Landing)
				pf_write(write_buff, buff_size, &br);
				pf_write(0, 0, &br);
			}
		}
	}
	return 1;
}


void temperature()
{
	//Start conversion (without ROM matching)
	ds18b20convert( &PORTB, &DDRB, &PINB, ( 1 << 0 ), NULL );
	//Delay (sensor needs time to perform conversion)
	_delay_ms( 1000 );
	//Read temperature (without ROM matching)
	ds18b20read( &PORTB, &DDRB, &PINB, ( 1 << 0 ), NULL, &temp );
	//Somehow use data stored in `temp` variable
}


void setup(void)
{
	// call sensor.begin() to initialize the library
	sensor.begin();
	printf("setup: Starting CCS8112");
	printf("setup: ccs811 lib  version: ");
	printf(CCS811_VERSION);
	// Enable I2C
	Wire.begin();
	// Enable CCS811
	CCS811.set_i2cdelay(50); // Needed for ESP8266 because it doesn't handle I2C clock stretch correctly
	bool ok= CCS811.begin();
	if( !ok ) printf("setup: CCS811 begin FAILED");
	// Start measuring
	ok= CCS811.start(CCS811_MODE_1SEC);
	if( !ok ) printf("setup: CCS811 start FAILED");
}

void AM(void)
{
	// sensor.measure() returns boolean value
	// - true indicates measurement is completed and success
	// - false indicates that either sensor is not ready or crc validation failed
	//   use getErrorCode() to check for cause of error.
	if (sensor.measure())
	{
		//printf("Temperature: ");
		//printf(sensor.getTemperature());
		Humidity = sensor.getHumidity()
	}
	else
	{  // error has occurred
		int errorCode = sensor.getErrorCode();
		switch (errorCode)
		{
			case 1: printf("ERR: Sensor is off line"); break;
			case 2: printf("ERR: CRC validation failed."); break;
		}
	}
}

void CCS(void)
{
	// Read
	uint16_t eco2, etvoc, errstat, raw;
	CCS811.read(&eco2,&etvoc,&errstat,&raw);
	
	// Print measurement results based on status
	if( errstat==CCS811_ERRSTAT_OK )
	{
		printf("CCS811: ");
		printf("eco2=");  printf(eco2);     printf(" ppm  ");
		printf("etvoc="); printf(etvoc);    printf(" ppb  ");
		Eco2 = eco2;
		Etvoc = etvoc;
		//Serial.print("raw6=");  Serial.print(raw/1024); Serial.print(" uA  ");
		//Serial.print("raw10="); Serial.print(raw%1024); Serial.print(" ADC  ");
		//Serial.print("R="); Serial.print((1650*1000L/1023)*(raw%1024)/(raw/1024)); Serial.print(" ohm");
		printf();
	}
	else if( errstat==CCS811_ERRSTAT_OK_NODATA )
	{
		printf("CCS811: waiting for (new) data");
	}
	else if( errstat & CCS811_ERRSTAT_I2CFAIL )
	{
		printf("CCS811: I2C error");
	}
	else
	{
		printf("CCS811: errstat="); printf(errstat, HEX);
		printf("="); printf(CCS811.errstat_str(errstat) );
	}
}

void adxl(void)
{
	x_acc = adxl345_getXData()
	y_acc = adxl345_getYData()
	z_acc = adxl345_getZData()
	Acceleration = sqrt(pow(x_acc, 2) + pow(y_acc, 2) + pow(z_acc, 2))
	printf(Acceleration)
}

void alt(void)
{
	if (bmp280_get_status())
	{
	    altitude = bmp280_getaltitude()
	    printf(altitude)
	    pressure = bmp280_getpressure()
	    printf(pressure)
	}
}
